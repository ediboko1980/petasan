--- a/drivers/md/dm-writecache.c	2019-09-17 16:26:49.000000000 +0200
+++ b/drivers/md/dm-writecache.c	2019-12-09 09:07:51.000000000 +0200
@@ -21,14 +21,14 @@
 
 #define HIGH_WATERMARK			50
 #define LOW_WATERMARK			45
-#define MAX_WRITEBACK_JOBS		0
+#define MAX_WRITEBACK_JOBS		65536
 #define ENDIO_LATENCY			16
 #define WRITEBACK_LATENCY		64
 #define AUTOCOMMIT_BLOCKS_SSD		65536
 #define AUTOCOMMIT_BLOCKS_PMEM		64
 #define AUTOCOMMIT_MSEC			1000
 
-#define BITMAP_GRANULARITY	65536
+#define BITMAP_GRANULARITY	4096
 #if BITMAP_GRANULARITY < PAGE_SIZE
 #undef BITMAP_GRANULARITY
 #define BITMAP_GRANULARITY	PAGE_SIZE
@@ -53,7 +53,7 @@ do {								\
 #endif
 
 #define MEMORY_SUPERBLOCK_MAGIC		0x23489321
-#define MEMORY_SUPERBLOCK_VERSION	1
+#define MEMORY_SUPERBLOCK_VERSION	2
 
 struct wc_memory_entry {
 	__le64 original_sector;
@@ -68,13 +68,32 @@ struct wc_memory_superblock {
 			__le32 block_size;
 			__le32 pad;
 			__le64 n_blocks;
-			__le64 seq_count;
 		};
 		__le64 padding[8];
 	};
 	struct wc_memory_entry entries[0];
 };
 
+#define SHADOW_FORCE_CREATE
+
+#define SHADOW_SUPERBLOCK_MAGIC		0xcafecafe
+#define SHADOW_SUPERBLOCK_VERSION	2
+#define SHADOW_SUPERBLOCK_SECTORS	1
+#define META_STATE_COMMITTED	1
+#define META_STATE_COMMITTING	2
+
+struct wc_shadow_superblock {
+	union {
+		struct {
+			__le32 magic;
+			__le32 version;
+			__le64 origin_start_sector;
+			__u8 meta_state;
+		};
+		__le64 padding[64];
+	};
+};
+
 struct wc_entry {
 	struct rb_node rb_node;
 	struct list_head lru;
@@ -182,6 +201,10 @@ struct dm_writecache {
 
 	struct bio_set *bio_set;
 	mempool_t *copy_pool;
+
+	bool metadata_shadow;
+	sector_t shadow_start_sector;
+	struct wc_shadow_superblock *shadow_sb;
 };
 
 #define WB_LIST_INLINE		16
@@ -386,6 +409,25 @@ static uint64_t read_seq_count(struct dm
 #endif
 }
 
+static uint64_t read_last_seq_count(struct dm_writecache *wc) 
+{
+	size_t b = wc->n_blocks;
+	uint64_t last_seq_count = 0;
+	uint64_t seq_count;
+	struct wc_memory_entry *p = &sb(wc)->entries[0];
+	__le64 empty = cpu_to_le64(-1);
+	while (0 < b) {
+		if (p->seq_count != empty) {
+			seq_count = le64_to_cpu(p->seq_count);
+			if (last_seq_count < seq_count)
+				last_seq_count = seq_count;		
+		}
+		p++;		
+		b--;
+	} 
+	return last_seq_count;
+}
+	
 static void clear_seq_count(struct dm_writecache *wc, struct wc_entry *e)
 {
 #ifdef DM_WRITECACHE_HANDLE_HARDWARE_ERRORS
@@ -448,7 +490,25 @@ static void writecache_notify_io(unsigne
 		complete(&endio->c);
 }
 
-static void ssd_commit_flushed(struct dm_writecache *wc)
+static int ssd_rw_shadow_sb(struct dm_writecache *wc, int op, int op_flags)
+{
+	struct dm_io_region region;
+	struct dm_io_request req;
+
+	region.bdev = wc->ssd_dev->bdev;
+	region.sector = wc->shadow_start_sector;
+	region.count = SHADOW_SUPERBLOCK_SECTORS;
+	req.bi_op = op;
+	req.bi_op_flags = op_flags;
+	req.mem.type = DM_IO_KMEM;
+	req.mem.ptr.addr = wc->shadow_sb;
+	req.client = wc->dm_io;
+	req.notify.fn = NULL;
+	
+	return dm_io(&req, 1, &region, NULL);	
+}
+
+static void ssd_write_flushed(struct dm_writecache *wc, sector_t start_sector)
 {
 	struct dm_io_region region;
 	struct dm_io_request req;
@@ -476,7 +536,7 @@ static void ssd_commit_flushed(struct dm
 		if (unlikely(region.sector + region.count > wc->metadata_sectors))
 			region.count = wc->metadata_sectors - region.sector;
 
-		region.sector += wc->start_sector;
+		region.sector += start_sector;
 		atomic_inc(&endio.count);
 		req.bi_op = REQ_OP_WRITE;
 		req.bi_op_flags = REQ_SYNC;
@@ -493,7 +553,24 @@ static void ssd_commit_flushed(struct dm
 
 	writecache_notify_io(0, &endio);
 	wait_for_completion_io(&endio.c);
+}
 
+static void ssd_commit_flushed(struct dm_writecache *wc)
+{
+	unsigned bitmap_bits = wc->dirty_bitmap_size * 8;
+	if (find_next_bit(wc->dirty_bitmap, bitmap_bits, 0) == bitmap_bits)
+		return;
+
+	wc->shadow_sb->meta_state = META_STATE_COMMITTING;
+	BUG_ON(ssd_rw_shadow_sb(wc, REQ_OP_WRITE, REQ_SYNC | REQ_FUA | REQ_PREFLUSH) < 0);
+
+	ssd_write_flushed(wc, wc->start_sector);
+	writecache_disk_flush(wc, wc->ssd_dev);
+
+	wc->shadow_sb->meta_state = META_STATE_COMMITTED;
+	BUG_ON(ssd_rw_shadow_sb(wc, REQ_OP_WRITE, REQ_SYNC | REQ_FUA) < 0);
+
+	ssd_write_flushed(wc, wc->shadow_start_sector + SHADOW_SUPERBLOCK_SECTORS);
 	writecache_disk_flush(wc, wc->ssd_dev);
 
 	memset(wc->dirty_bitmap, 0, wc->dirty_bitmap_size);
@@ -736,8 +813,6 @@ static void writecache_flush(struct dm_w
 	writecache_wait_for_ios(wc, WRITE);
 
 	wc->seq_count++;
-	pmem_assign(sb(wc)->seq_count, cpu_to_le64(wc->seq_count));
-	writecache_flush_region(wc, &sb(wc)->seq_count, sizeof sb(wc)->seq_count);
 	writecache_commit_flushed(wc);
 
 	wc->overwrote_committed = false;
@@ -883,7 +958,6 @@ static void writecache_resume(struct dm_
 	struct dm_writecache *wc = ti->private;
 	size_t b;
 	bool need_flush = false;
-	__le64 sb_seq_count;
 	int r;
 
 	wc_lock(wc);
@@ -900,13 +974,7 @@ static void writecache_resume(struct dm_
 		INIT_LIST_HEAD(&wc->freelist);
 	}
 	wc->freelist_size = 0;
-
-	r = memcpy_mcsafe(&sb_seq_count, &sb(wc)->seq_count, sizeof(uint64_t));
-	if (r) {
-		writecache_error(wc, r, "hardware memory error when reading superblock: %d", r);
-		sb_seq_count = cpu_to_le64(0);
-	}
-	wc->seq_count = le64_to_cpu(sb_seq_count);
+	wc->seq_count = read_last_seq_count(wc) + 1;
 
 #ifdef DM_WRITECACHE_HANDLE_HARDWARE_ERRORS
 	for (b = 0; b < wc->n_blocks; b++) {
@@ -1016,6 +1084,69 @@ static int process_flush_on_suspend_mesg
 	return 0;
 }
 
+static int set_config_value(struct dm_writecache *wc, char *key, char *val)
+{
+	unsigned v,x;
+	if (sscanf(val, "%u", &v) != 1)
+		return -EINVAL;
+	if (!strcasecmp(key, "high_watermark")) {
+		if (v < 0 || v > 100)
+			return -EINVAL;
+		wc_lock(wc);
+		x = (uint64_t)wc->n_blocks * (100 - v);
+		x += 50;
+		do_div(x, 100);
+		if (wc->freelist_low_watermark < x) {
+			wc_unlock(wc);
+			return -EINVAL;
+		}
+		wc->freelist_high_watermark = x;
+		wc->high_wm_percent_set = true;
+		if (wc->freelist_size + wc->writeback_size 
+			<= wc->freelist_high_watermark)
+			queue_work(wc->writeback_wq, &wc->writeback_work);
+		wc_unlock(wc);
+	}
+	else if (!strcasecmp(key, "low_watermark")) {
+		if (v < 0 || v > 100)
+			return -EINVAL;
+		wc_lock(wc);
+		x = (uint64_t)wc->n_blocks * (100 - v);
+		x += 50;
+		do_div(x, 100);
+		if (x < wc->freelist_high_watermark) {
+			wc_unlock(wc);
+			return -EINVAL;
+		}
+		wc->freelist_low_watermark = x;
+		wc->low_wm_percent_set = true;
+		wc_unlock(wc);
+	}
+	else if (!strcasecmp(key, "writeback_jobs")) {
+		wc_lock(wc);
+		wc->max_writeback_jobs = v;
+		wc->max_writeback_jobs_set = true;
+		wc_unlock(wc);
+	}
+	else if (!strcasecmp(key, "autocommit_blocks")) {
+		wc_lock(wc);
+		wc->autocommit_blocks = v;
+		wc->autocommit_blocks_set = true;
+		wc_unlock(wc);
+	}
+	else if (!strcasecmp(key, "autocommit_time")) {
+		if (v < 1 || v > 3600000)
+			return -EINVAL;
+		wc_lock(wc);
+		wc->autocommit_jiffies = msecs_to_jiffies(v);
+		wc->autocommit_time_set = true;
+		wc_unlock(wc);
+	}
+	else
+		return -EINVAL;
+	return 0;
+}
+
 static int writecache_message(struct dm_target *ti, unsigned argc, char **argv,
 			      char *result, unsigned maxlen)
 {
@@ -1026,6 +1157,8 @@ static int writecache_message(struct dm_
 		r = process_flush_mesg(argc, argv, wc);
 	else if (!strcasecmp(argv[0], "flush_on_suspend"))
 		r = process_flush_on_suspend_mesg(argc, argv, wc);
+	else if (argc==2)
+		r = set_config_value(wc, argv[0], argv[1]);
 	else
 		DMERR("unrecognised message received: %s", argv[0]);
 
@@ -1225,7 +1358,8 @@ bio_copy:
 			}
 		} while (bio->bi_iter.bi_size);
 
-		if (unlikely(wc->uncommitted_blocks >= wc->autocommit_blocks))
+		if (unlikely(bio->bi_opf & REQ_FUA || 
+				wc->uncommitted_blocks >= wc->autocommit_blocks))
 			writecache_flush(wc);
 		else
 			writecache_schedule_autocommit(wc);
@@ -1754,7 +1888,6 @@ static int init_memory(struct dm_writeca
 	pmem_assign(sb(wc)->version, cpu_to_le32(MEMORY_SUPERBLOCK_VERSION));
 	pmem_assign(sb(wc)->block_size, cpu_to_le32(wc->block_size));
 	pmem_assign(sb(wc)->n_blocks, cpu_to_le64(wc->n_blocks));
-	pmem_assign(sb(wc)->seq_count, cpu_to_le64(0));
 
 	for (b = 0; b < wc->n_blocks; b++)
 		write_original_sector_seq_count(wc, &wc->entries[b], -1, -1);
@@ -1781,7 +1914,8 @@ static void writecache_dtr(struct dm_tar
 	if (wc->flush_thread)
 		kthread_stop(wc->flush_thread);
 
-	bioset_free(wc->bio_set);
+	if (wc->bio_set)
+		bioset_free(wc->bio_set);
 
 	mempool_destroy(wc->copy_pool);
 
@@ -1813,6 +1947,9 @@ static void writecache_dtr(struct dm_tar
 	if (wc->dirty_bitmap)
 		vfree(wc->dirty_bitmap);
 
+	if (wc->shadow_sb)
+		free_pages_exact(wc->shadow_sb, 1 << SECTOR_SHIFT);
+
 	kfree(wc);
 }
 
@@ -1829,6 +1966,8 @@ static int writecache_ctr(struct dm_targ
 	int low_wm_percent = LOW_WATERMARK;
 	uint64_t x;
 	struct wc_memory_superblock s;
+	bool read_shadow = false;
+	bool sync_shadow = false;
 
 	static struct dm_arg _args[] = {
 		{0, 10, "Invalid number of feature args"},
@@ -1991,8 +2130,7 @@ static int writecache_ctr(struct dm_targ
 			if (sscanf(string, "%llu%c", &start_sector, &dummy) != 1)
 				goto invalid_optional;
 			wc->start_sector = start_sector;
-			if (wc->start_sector != start_sector ||
-			    wc->start_sector >= wc->memory_map_size >> SECTOR_SHIFT)
+			if (wc->start_sector >= wc->memory_map_size >> SECTOR_SHIFT)
 				goto invalid_optional;
 		} else if (!strcasecmp(string, "high_watermark") && opt_params >= 1) {
 			string = dm_shift_arg(&as), opt_params--;
@@ -2037,6 +2175,14 @@ static int writecache_ctr(struct dm_targ
 				wc->writeback_fua = false;
 				wc->writeback_fua_set = true;
 			} else goto invalid_optional;
+		} else if (!strcasecmp(string, "metadata_shadow")) {
+			wc->metadata_shadow = true;
+		} else if (!strcasecmp(string, "shadow_start_sector") && opt_params >= 1) {
+			unsigned long long shadow_start_sector;
+			string = dm_shift_arg(&as), opt_params--;
+			if (sscanf(string, "%llu%c", &shadow_start_sector, &dummy) != 1)
+				goto invalid_optional;
+			wc->shadow_start_sector = shadow_start_sector;
 		} else {
 invalid_optional:
 			r = -EINVAL;
@@ -2063,6 +2209,20 @@ invalid_optional:
 		size_t n_blocks, n_metadata_blocks;
 		uint64_t n_bitmap_bits;
 
+		#ifdef SHADOW_FORCE_CREATE
+		// This is temp until tools support passing shadow params
+		wc->metadata_shadow = true;
+		wc->shadow_start_sector = 0;
+		n_blocks = wc->memory_map_size / (wc->block_size + 2 * sizeof(struct wc_memory_entry));
+		offset = n_blocks * sizeof(struct wc_memory_entry);
+		// round to next block
+		offset = (offset + wc->block_size - 1) & ~(size_t)(wc->block_size - 1);
+		offset += wc->block_size * 100; 
+		wc->start_sector = offset >> SECTOR_SHIFT;
+		DMINFO("Forcing creation of metadata shadow, moving start_sector to: %lu", 
+			wc->start_sector);
+		#endif
+
 		wc->memory_map_size -= (uint64_t)wc->start_sector << SECTOR_SHIFT;
 
 		bio_list_init(&wc->flush_list);
@@ -2116,8 +2276,54 @@ invalid_optional:
 			goto bad;
 		}
 
+		if (wc->metadata_shadow) {
+			if (wc->start_sector < SHADOW_SUPERBLOCK_SECTORS + 
+				wc->shadow_start_sector + wc->metadata_sectors) {
+				ti->error = "Insufficient space for metada shadow";
+				DMERR("start_sector should be greater than: %lu",
+					SHADOW_SUPERBLOCK_SECTORS + 
+					wc->shadow_start_sector + wc->metadata_sectors);
+				r = -EINVAL;
+				goto bad;
+			}
+
+			wc->shadow_sb = alloc_pages_exact(SHADOW_SUPERBLOCK_SECTORS << 
+				SECTOR_SHIFT, GFP_KERNEL);
+			if (!wc->shadow_sb) {
+				ti->error = "Cannot allocate shadow superblock";
+				r = -ENOMEM;
+				goto bad;
+			}
+			r = ssd_rw_shadow_sb(wc, REQ_OP_READ, 0);
+			if (r) {
+				ti->error = "Cannot read shadow superblock";
+				goto bad;
+			}	
+			if (le32_to_cpu(wc->shadow_sb->magic) == SHADOW_SUPERBLOCK_MAGIC && 
+				le32_to_cpu(wc->shadow_sb->version) == SHADOW_SUPERBLOCK_VERSION) {
+				
+				if (le64_to_cpu(wc->shadow_sb->origin_start_sector) 
+					!= wc->start_sector) {
+					ti->error = "Shadow superblock origin sector mis-match";
+					r = -EINVAL;
+					goto bad;
+				}
+				if (wc->shadow_sb->meta_state == META_STATE_COMMITTING) {
+					DMWARN("Reading metada from shadow");
+					read_shadow = true;
+				} else {
+					sync_shadow = true;
+				}
+
+			}
+			wc->shadow_sb->magic = cpu_to_le32(SHADOW_SUPERBLOCK_MAGIC);
+			wc->shadow_sb->version = cpu_to_le32(SHADOW_SUPERBLOCK_VERSION);
+			wc->shadow_sb->origin_start_sector = cpu_to_le64(wc->start_sector);
+		}
+
 		region.bdev = wc->ssd_dev->bdev;
-		region.sector = wc->start_sector;
+		region.sector = read_shadow ? 
+			wc->shadow_start_sector + SHADOW_SUPERBLOCK_SECTORS : wc->start_sector;
 		region.count = wc->metadata_sectors;
 		req.bi_op = REQ_OP_READ;
 		req.bi_op_flags = REQ_SYNC;
@@ -2139,6 +2345,8 @@ invalid_optional:
 		goto bad;
 	}
 	if (!le32_to_cpu(s.magic) && !le32_to_cpu(s.version)) {
+		BUG_ON(read_shadow);
+		sync_shadow = false;
 		r = init_memory(wc);
 		if (r) {
 			ti->error = "Unable to initialize device";
@@ -2195,6 +2403,20 @@ overflow:
 	wc->metadata_sectors = offset >> SECTOR_SHIFT;
 	wc->block_start = (char *)sb(wc) + offset;
 
+	if (wc->metadata_shadow && (sync_shadow || read_shadow)) {
+		memset(wc->dirty_bitmap, -1, wc->dirty_bitmap_size);
+		if (sync_shadow) {
+			DMINFO("sync metadata to shadow");
+			ssd_write_flushed(wc, wc->shadow_start_sector + 
+					SHADOW_SUPERBLOCK_SECTORS);
+		} else if (read_shadow) {
+			DMINFO("sync metadata to origin");
+			ssd_write_flushed(wc, wc->start_sector);
+		}
+		memset(wc->dirty_bitmap, 0, wc->dirty_bitmap_size);
+		writecache_disk_flush(wc, wc->ssd_dev);	
+	}
+
 	x = (uint64_t)wc->n_blocks * (100 - high_wm_percent);
 	x += 50;
 	do_div(x, 100);
@@ -2217,6 +2439,12 @@ overflow:
 	if (WC_MODE_PMEM(wc))
 		persistent_memory_flush_cache(wc->memory_map, wc->memory_map_size);
 
+	DMINFO("-----------------");
+	DMINFO("n_blocks: %lu",wc->n_blocks);
+	DMINFO("metadata start sector: %lu",wc->start_sector);
+	DMINFO("metadata sectors: %lu",wc->metadata_sectors);
+	DMINFO("-----------------");
+
 	return 0;
 
 bad_arguments:
@@ -2231,7 +2459,6 @@ static void writecache_status(struct dm_
 			      unsigned status_flags, char *result, unsigned maxlen)
 {
 	struct dm_writecache *wc = ti->private;
-	unsigned extra_args;
 	unsigned sz = 0;
 	uint64_t x;
 
@@ -2244,45 +2471,24 @@ static void writecache_status(struct dm_
 	case STATUSTYPE_TABLE:
 		DMEMIT("%c %s %s %u ", WC_MODE_PMEM(wc) ? 'p' : 's',
 				wc->dev->name, wc->ssd_dev->name, wc->block_size);
-		extra_args = 0;
-		if (wc->start_sector)
-			extra_args += 2;
-		if (wc->high_wm_percent_set)
-			extra_args += 2;
-		if (wc->low_wm_percent_set)
-			extra_args += 2;
-		if (wc->max_writeback_jobs_set)
-			extra_args += 2;
-		if (wc->autocommit_blocks_set)
-			extra_args += 2;
-		if (wc->autocommit_time_set)
-			extra_args += 2;
-		if (wc->writeback_fua_set)
-			extra_args++;
-
-		DMEMIT("%u", extra_args);
-		if (wc->start_sector)
-			DMEMIT(" start_sector %llu", (unsigned long long)wc->start_sector);
-		if (wc->high_wm_percent_set) {
-			x = (uint64_t)wc->freelist_high_watermark * 100;
-			x += wc->n_blocks / 2;
-			do_div(x, (size_t)wc->n_blocks);
-			DMEMIT(" high_watermark %u", 100 - (unsigned)x);
-		}
-		if (wc->low_wm_percent_set) {
-			x = (uint64_t)wc->freelist_low_watermark * 100;
-			x += wc->n_blocks / 2;
-			do_div(x, (size_t)wc->n_blocks);
-			DMEMIT(" low_watermark %u", 100 - (unsigned)x);
-		}
-		if (wc->max_writeback_jobs_set)
-			DMEMIT(" writeback_jobs %u", wc->max_writeback_jobs);
-		if (wc->autocommit_blocks_set)
-			DMEMIT(" autocommit_blocks %u", wc->autocommit_blocks);
-		if (wc->autocommit_time_set)
-			DMEMIT(" autocommit_time %u", jiffies_to_msecs(wc->autocommit_jiffies));
-		if (wc->writeback_fua_set)
-			DMEMIT(" %sfua", wc->writeback_fua ? "" : "no");
+		DMEMIT(" start_sector %llu", (unsigned long long)wc->start_sector);
+		x = (uint64_t)wc->freelist_high_watermark * 100;
+		x += wc->n_blocks / 2;
+		do_div(x, (size_t)wc->n_blocks);
+		DMEMIT(" high_watermark %u", 100 - (unsigned)x);
+		x = (uint64_t)wc->freelist_low_watermark * 100;
+		x += wc->n_blocks / 2;
+		do_div(x, (size_t)wc->n_blocks);
+		DMEMIT(" low_watermark %u", 100 - (unsigned)x);
+		DMEMIT(" writeback_jobs %u", wc->max_writeback_jobs);
+		DMEMIT(" autocommit_blocks %u", wc->autocommit_blocks);
+		DMEMIT(" autocommit_time %u", jiffies_to_msecs(wc->autocommit_jiffies));
+		DMEMIT(" %sfua", wc->writeback_fua ? "" : "no");
+		if (wc->metadata_shadow) {
+			DMEMIT(" metadata_shadow");
+			DMEMIT(" shadow_start_sector %llu", 
+				(unsigned long long)wc->shadow_start_sector);
+		}
 		break;
 	}
 }
